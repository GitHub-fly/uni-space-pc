{"remainingRequest":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vuetify-loader\\lib\\loader.js??ref--17-0!D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\coding\\Vue-app\\uni-space-pc\\src\\views\\Sign.vue?vue&type=template&id=9bd32b12&scoped=true&","dependencies":[{"path":"D:\\coding\\Vue-app\\uni-space-pc\\src\\views\\Sign.vue","mtime":1576335483197},{"path":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\coding\\Vue-app\\uni-space-pc\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}